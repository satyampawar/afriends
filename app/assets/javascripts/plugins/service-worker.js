var focusOrOpenWindow, log, openURL,
  slice = [].slice;

log = function() {
  var args;
  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  return console.log.apply(console, ["[Service Worker]"].concat(slice.call(args)));
};

openURL = function(clients, url) {
  return clients.matchAll({
    type: "window"
  }).then(focusOrOpenWindow.bind(self, url));
};

focusOrOpenWindow = function(url, windowClients) {
  var client, i, len;
  for (i = 0, len = windowClients.length; i < len; i++) {
    client = windowClients[i];
    if (client.url === url && "focus" in client) {
      return client.focus().then(function(focusedClient) {
        if ("navigate" in focusedClient) {
          return focusedClient.navigate(focusedClient.url);
        }
      });
    }
  }
  if (clients.openWindow) {
    return clients.openWindow(url);
  }
};

log("Started", self);

self.addEventListener("install", function(event) {
  self.skipWaiting();
  return log("Installed", event);
});

self.addEventListener("activate", function(event) {
  return log("Activated", event);
});

self.addEventListener("push", function(event) {
  var event_data, notification, ref;
  log("Push message received", event);
  notification = event.data ? (event_data = event.data.json(), [
    event_data.title, {
      body: event_data.body,
      data: event_data
    }
  ]) : [
    "Message received", {
      body: "You have a new message",
      data: {
        url: "/"
      }
    }
  ];
  return event.waitUntil((ref = self.registration).showNotification.apply(ref, notification));
});

self.addEventListener("notificationclick", function(event) {
  event.notification.close();
  return event.waitUntil(openURL(clients, event.notification.data.url));
});

// ---
// generated by coffee-script 1.9.2
// ---
// generated by coffee-script 1.9.2


// navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) { });
// function subscribe() {
//   var subscribeButton = document.querySelector('.js-subscribe-button');
//   subscribeButton.disabled = false;

//   navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
//     serviceWorkerRegistration.pushManager.subscribe()
//       .then(function(subscription) {
//         // The subscription was successful
//         subscribeButton.disabled = true;
//         return sendSubscriptionToServer(subscription);
//       })
//       .catch(function(error) {
//         if (Notification.permission === 'denied') {
//           console.log('Permission for Notifications was denied');
//           subscribeButton.disabled = true;
//         } else {
//           console.log('Unable to subscribe to push.', error);
//           subscribeButton.disabled = false;
//         }
//       });
//   });
// }
