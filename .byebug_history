	c
c
x
c
render "pages/show_page_institute"
when "inst"
@page.page_type
c
@page_institute.save
@page_institute
@page_institute = page.build_page_institute page_params
c
Page.last
Page.second.delete
Page.first.delete
Page.count
Page.first
Page.all
PageInstitute.all
PageInstitute
c
page_params
@page_institute = page.build_page_institute 
@page_institute = page.build_page_institute page_params
page_params
c
page_params
page.build_page_institute page_params
page.build_page_institute
PageInstitute
page.page_institute
page.page_institutes
page.page_institute
page_params
page
c
page
Page.last.delete
Page.last
Page.first
Page.count
page.page_institute.new(page_params)
page.page_institute.build(page_params)
page_params
c
params[:longs]
params[:long]
params[:lats]
params[:lat]
params[:picture]
params
PageInstitute
page.page_institute
page.page_institute.build
page.page_institute.build()
page.page_institute.new
page.page_institute
page.page_insttitute
page
page.update_attributes(title: params[:name])
params
page
c
Page
PageInstitute
PageInstitue
params[:page_type]
params
c
params
c
params
c
@post.photoposts
@post
@post.photoposts.create(:photopst => photopst)
c
last_post(post)
last_post(post).try(:user).try(:fullname)
last_post(post)
last_post(post).user.try(:fullname)
c
last_post(post).user.try(:fullname)
last_post(post).try.(:user).try(:fullname)
last_post(post).nil? 
c
C
c
likes
c
cv
current_user.likes.where(:post_id => params["post_id"]).first_or_create
current_user.likes.where(:post_id => params["post_id"]).first.find_or_create
current_user.likes.where(:post_id => params["post_id"]).find_or_create
params
Like
Like.first
Post.first.likes
Post.first
current_user.likes
params
c
params
c
"HellO @SATYAM AND @PO".scan(/(@\w+)?/).flatten.compact
"HellO @SATYAM AND @PO".scan(/(@\w+)?/).flatten
"HellO @SATYAM AND @PO".scan(/(@\w+)?/).flatten.compact
input_string[/#{str1_markerstring}(.*?)#{str2_markerstring}/m, 1]
input_string ="blahblahblawowow STARTowowoEND"
input_string 
input_string[/#{str1_markerstring}(.*?)#{str2_markerstring}/m, 1]
input_string = "blahblahblahSTARTfoofoofooENDwowow STARTowowoEND"
input_string[/#{str1_markerstring}(.*?)#{str2_markerstring}/m, 1]
str2_markerstring = "END"
str1_markerstring = "START"
input_string = "blahblahblahSTARTfoofoofooENDwowowowowo"
Regex.Replace(subjectString, @"^((?:\S+\s+){2}\S+).*", "${1}", RegexOptions.Multiline);
Regex.Replace(subjectString, "^((?:\S+\s+){2}\S+).*", "${1}", RegexOptions.Multiline);
Regex.Replace(subjectString, @+"^((?:\S+\s+){2}\S+).*", "${1}", RegexOptions.Multiline);
Regex.Replace(subjectString, @"^((?:\S+\s+){2}\S+).*", "${1}", RegexOptions.Multiline);
subjectString = "hello @satyam pawar what is this @prashant tomar is"
Regex.Replace(subjectString, @"^((?:\S+\s+){2}\S+).*", "${1}", RegexOptions.Multiline);
"hello @satyam pawar what is this @prashant tomar is"
"hello @satyam pawar what is this @prashant tomar is".partition('@').last.partition('@')
"hello @satyam pawar what is this @prashant tomar is".partition('@')
"hello @satyam pawar what is this @prashant tomar is".partition('@').last.split[0..2][0..1].join(' ')
"hello @satyam pawar what is this @prashant tomar is"partition('@').last.split[0..2][0..1].join(' ').first
"satu @world pawar giv".partition('@').last.split[0..2][0..1].join(' ')
"satu @world pawar giv".partition('@').last.split[0..2][0..1].join('')
"satu @world pawar giv".partition('@').last.split[0..2][0..1]
"satu @world pawar giv".partition('@').last.split[0..2]
"satu @world pawar giv".partition('@').last.split[0..2].join('')
"satu @world pawar giv".partition('@').last.split[0..2]
"satu @world pawar giv".partition('@').last.split("0..2")
"satu @world pawar giv".partition('@').last.split(0..2)
"satu @world pawar giv".partition('@').last.split([0..2])
"satu @world pawar giv".partition('@').last.split('0..2')
"satu @world pawar giv".partition('@').last
"satu @world pawar giv".partition('@').last.
"satu @world pawar giv".partition('@').last.subString()
"satu @world pawar giv".partition('@').last.substring()
"satu @world pawar giv".partition('@').last.substring('2')
"satu @world pawar giv".partition('@').last.substring(2)
"satu @world pawar giv".partition('@').last
"world pawar giv".partition('@').last
post_params[:post_name].partition('@').last
post_params[:post_name].partition('=').last
"satu @world pawar giv".split('@', 3)[1]
"satu @world pawar giv".split('@', 1)[1]
"satu @world pawar giv".split('@', 2)[1]
"satu @world pawar giv".split('@', 2)
"satu @world pawar giv".split('@', 2)[1]
"satu @world pawar giv".match('@2')[1]
"satu @world pawar giv".match('@(.*)')[1]
"satu @world pawar giv".split('@')
post_params[:post_name].split('@')
post_params[:post_name]
post_params
c
users.where("id IN (?)",current_user.friendlist.map(&:friend_id))
users.where("id IN (?)",#{current_user.friendlist.map(&:friend_id)})
current_user.friendlist.map(&:friend_id)
#{current_user.friendlist.map(&:friend_id)}
users.where(id: #{current_user.friendlist.map(&:friend_id)})
users.where("id: #{current_user.friendlist.map(&:friend_id)})
users.where("id IN (#{current_user.friendlist.map(&:friend_id)})")
users.where("id IN #{current_user.friendlist.map(&:friend_id)}")
users.where("id = #{current_user.friendlist.map(&:friend_id)}")
users.where("id = 1")
users.where("id = #{current_user.friendlist.map(&:friend_id)}")
users
users.where("id = #{current_user.friendlist.map(&:friend_id)}")
users.where("id = #{current_user.friendlist.map(&:friend_id)}").collect{|a| [id: a.id, name: a.first_name, image_url: user_picture_url(a,"imgss","[ img-circle pull-left ]",48), created_at: a.created_at, updated_at: a.updated_at]}.flatten
users = User.where("first_name ilike ?","#{params[:filter]}%")
c
User.lasct(3)[0]
User.last(3)[0]
User.last(2)[0]
User.last
 User.where("first_name Like ?","%#{params[:filter]}%")
 User.where("first_name Like ?","%#{params[:filter]}")
 User.where("first_name Like ?","#{params[:filter]}")
params[:filter]
 User.where("first_name Like ?","#{params[:filter]}%")
c
cc
params[:filter]
User.where("first_name Like ?","#{params[:filter]}%")
c
friends = User.where("id = #{current_user.friendlist.map(&:friend_id)}, first_name like '%'#{params[:filter]}").collect{|a| [id: a.id, name: a.first_name, image_url: user_picture_url(a,"imgss","[ img-circle pull-left ]",48), created_at: a.created_at, updated_at: a.updated_at]}.flatten
c
friends = User.where("id = #{current_user.friendlist.map(&:friend_id)}, first_name like '%'#{params[:filter]}").collect{|a| [id: a.id, name: a.first_name, image_url: user_picture_url(a,"imgss","[ img-circle pull-left ]",48), created_at: a.created_at, updated_at: a.updated_at]}.flatten
friends = User.where("id = #{current_user.friendlist.map(&:friend_id)}, first_name like #{params[:filter]}").collect{|a| [id: a.id, name: a.first_name, image_url: user_picture_url(a,"imgss","[ img-circle pull-left ]",48), created_at: a.created_at, updated_at: a.updated_at]}.flatten
params[:filter]
params[filter]
c
friends = User.where(id: (current_user.friendlist.map(&:friend_id))).collect{|a| [id: a.id, name: a.first_name, image_url: user_picture_url(a,"imgss","[ img-circle pull-left ]",48), created_at: a.created_at, updated_at: a.updated_at]}.flatten
c
friends = User.where(id: (current_user.friendlist.map(&:friend_id))).collect{|a| [id: a.id, name: a.first_name, image_url: user_picture(a,"imgss","[ img-circle pull-left ]",48), created_at: a.created_at, updated_at: a.updated_at]}.flatten
c
friends = User.where(id: (current_user.friendlist.map(&:friend_id))).collect{|a| [id: a.id, name: a.first_name, image_url: user_picture(a,"imgss","[ img-circle pull-left ]",48), created_at: a.created_at, updated_at: a.updated_at]}.flatten
c
friends = User.where(id: (current_user.friendlist.map(&:friend_id))).select(:first_name, :email)
 c
c
current_user.friendlist.map(&:friend_id).select(:first)
current_user.friendlist.map(&:friend_id)
current_user.friendlist
current_user.friendlists
current_user.friends
User.find(6)
User.find(4)
 friends = User.where(id: (current_user.friendlist.ids)).select(:first_name, :email)
current_user.friendlist.ids
c
friends = User.where(id: (current_user.friendlist.ids)).select(:first_name, :email)
params
c
ActiveSupport::JSON.decode(User.where(id: (current_user.friendlist.ids)))
JSON.parse(User.where(id: (current_user.friendlist.ids)))
JSON.parse(User.where(id: (current_user.friendlist.ids))
JSON.parse(User.where(id: (current_user.friendlist.ids)).select(:first_name, :email))
Parse.json(User.where(id: (current_user.friendlist.ids)).select(:first_name, :email))
User.where(id: (current_user.friendlist.ids)).select(:first_name, :email).json_parse
User.where(id: (current_user.friendlist.ids)).select(:first_name, :email).to_json.reject('id')
User.where(id: (current_user.friendlist.ids)).select(:first_name, :email).to_json.reject(:id)
User.where(id: (current_user.friendlist.ids)).select(:first_name, :email).to_json.except(:id)
User.where(id: (current_user.friendlist.ids)).select(:first_name, :email).to_json
c
User.where(id: (current_user.friendlist.ids)).select(:first_name, :email).to_json
c
User.where(id: (current_user.friendlist.ids)).select(:first_name, :email)
User.where(id: (current_user.friendlist.ids)).pluck(:first_name, :email)
User.where(id: (current_user.friendlist.ids)).pluck(:first_name, :email).to_json
User.where(id: (current_user.friendlist.ids)).pluck(:first_name, :email)
User.where(id: (current_user.friendlist.ids)).pluck(:first_name, :email, :avtar)
User.where(id: (current_user.friendlist.ids)).pluck(:first_name, :email)
User.where(id: (current_user.friendlist.ids)).pluck(:name, :email)
User.where(id: (current_user.friendlist.ids))
User.where("id: (4,6)")
User.where(ids: (current_user.friendlist.ids))
User.where(ids: (current_user.friendlist.ids)
current_user.friendlist.ids
current_user.friendlist
current_user.friendlist.pluck(:name, :email)
current_user.friendlist
current_user
c
params
c
params
c
results.movies[0..4].map{|f| [f.title, f.rating,"<input type='radio' name='movies' class='radio-btn' value='#{f.id}'>"]}
results.movies[0..4].collect{|f| [f.title, f.rating,"<input type='radio' name='movies' class='radio-btn' value='#{f.id}'>"]}
results.movies[0..49]
results.movies[0..10]
