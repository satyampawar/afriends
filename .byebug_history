c
e.message
c
e.message
c
e.message[0]
e.message.to_a
e.message.to_s
e.message
c
e.message
c
e.message
c
e.message
e.messae
c
e.new
e.to_s.
e.messages
e.mesages
e
c
e.to_s
e
c
self.@datac
self.@data
self
e.message
e.messages
c
e.messages
e
c
e.@data
e.data
e
c
e.data
e
c
CustomException.newc
CustomException
CustemException
c
CustomException.new(bla: "blupp")
params["password"].eql?(params["password_confirmation"])
params["password"].eql?(params["confirm_password"])
params
c
setting[1]
setting[2]
setting
c
  file_content = AES.encrypt(encrypted_file_content, secured_keys.key)
encrypted_file_content
  file_content = AES.decrypt(encrypted_file_content, secured_keys.key)
c
Net::HTTP.get(URI(photo.pic.url))
Net::HTTP.get("URI(photo.pic.url))
Net::HTTP.get(photo.pic.url)
encrypted_file_content = (File.read(photo.pic.path) rescue Net::HTTP.get(photo.pic.url))
c
json = Net::HTTP.get(uri)
uri = URI(photo.pic.url)
File.read(photo.pic.url)
rmat =(File.extname(photo.pic_file_name)).gsub("..",".")
c
photo.pic.url
photo.pic.path
photo.pic
File.read(photo.pic.path)
File.read(photo.pic.path(:medium)
(File.read(photo.pic.path(:medium))
frmat =(File.extname(photo.pic_file_name)).gsub("..",".")
(File.extname(photo.pic_file_name)).gsub("..","")
(File.extname(photo.pic_file_name)).gsub(".","")
(File.extname(photo.pic_file_name)).gsub("..","")
(File.extname(photo.pic_file_name)).gsub("..",".")
File.extname(photo.pic_file_name)
c
params[:format]
 post.comments.new(comment_params.merge(user_id: params[:user_id]))
c
 post.comments.new(comment_params.merge(user_id: params[:user_id]))
c
 post.comments.new(comment_params.merge(user_id: params[:user_id]))
c
  post.comments.new(comment_params.merge(user_id: params[:user_id]))
comment_params.merge(user_id: params[:user_id])
comment_params
params
c
Post.find params[:post_id]
params
c
Comment
params
c
@post.photoposts.new(:photopst => photopst).save
@post.photoposts.new(:photopst => photopst)
c
@post.photoposts.new(:photopst => photopst)
c
@post.photoposts.new(:photopst => photopst)
photopst
c
 c
c
@conversation.id
<% end %>
    }
        chatBox.notify();
        chatbox.scrollTop(chatbox[0].scrollHeight);
        chatbox.children().last().removeClass("self").addClass("other");        
        chatBox.chatWith(id);
    if(sender_id != reciever_id){
    chatbox.scrollTop(chatbox[0].scrollHeight);
    chatbox.append("<%= j render( partial: @message ) %>");
    debugger
    var reciever_id = $('meta[name=user-id]').attr("content");
    var sender_id = "<%= @message.user.id %>";
    var chatbox = $("#chatbox_" + id + " .chatboxcontent");
    var id = "<%= @conversation.id %>";
<%= publish_to @path do %>
c
conversation
c
conversation.recipient
conversation.sender
conversation
c
Friendlist
FriendsList
FriendsLiust
FriendList
FriendLists
FriendList
Friendlog.find_by(:user_id => @user1, :friend_id => current_user.id)
Friendlog.where(:user_id => @user1, :friend_id => current_user.id)
Friendlog.where(:user_id => @user1 && :friend_id => current_user.id)
Friendlog.where(:user_id => @user1 && friend_id: current_user.id)
Friendlog.where(:user_id => @user1 && friend_id: current_user)
Friendlog.where(:user_id => @user1)
Friendlog
c
a += u.fullname
a = ""
a += u.fullname
a +=u.fullname
a = []
u.fullname
string
c
User.find(pt.tag_user_id).map(&:fullname)
User.find(pt.tag_user_id).collect{|u| u.fullname}
User.find(pt.tag_user_id)
pt User.find(pt.tag_user_id)
pt
c
User.find(pt.tag_user_id)
User.find(pt.tag_user_id).collect{|u| u.fullname}.to_s
User.find(pt.tag_user_id).collect{|u| u.fullname}.to_S
User.find(pt.tag_user_id).collect{|u| u.fullname}
User.find(pt.tag_user_id).collect{|u| u.fullname.first}
User.find(pt.tag_user_id).collect{|u| u.fullname.to_s}
User.find(pt.tag_user_id).collect{|u| u.fullname}
User.find(pt.tag_user_id)
pt.tag_user_id
c
post.post_event.page_moviec
post.post_event.page_movie
c
post.post_event.page_movie
post.post_event.page_id
post.post_event.page
post.post_event
c
post.post_event.page_movie
post.post_event.page_m
post.post_event
c
Page.find 5
post.post_event
post.post_event.page
post.post_event.page_movies
post.post_event.page_movie
post.post_event.pageMovies
post.post_event.pageMovie
post.post_event.pages
post.post_event.page
post.post_event
post
c
post.post_event
c
post.post_event
c
post.post_event.delete
c
post.post_event.delete
post.post_event
post.post_event.delete
post.post_event
post.post_event.present?
c
post.post_event
c
post.post_event
post
c
x
c
cc
c
@tok_token
@vid.token_base
c
@tok_token
@vid
c
cc
c
session_id
c
session_id.to
session_id.to_
session_id.to_hash
session_id.to_a
session_id.to_h
session_id.to_json
session_id["session_id"]
session_id[:session_id]
session_id
session_id[2..session_id.length].gsub('-', '+').gsub('_', '/')
session_id[2..session_id.length]
session_id
c
cc
c
session.session_id.to_s
@tok_token = @opentok.generate_token :session_id => session.session_id.to_s
 @vid = VideoChat.new(caller_id:current_user.id, receiver_id: params[:id])
@room = User.find(params[:id])
c
decoded
decoded.include? "45756982"
decoded.include? 45756982
decode.api_key? 45756982
decoded = Base64.decode64(edn)
 edn = a[2..a.length].gsub('-', '+').gsub('_', '/')
a =session.session_id
session.session_id
session
decoded.include? "45756982"
