c
users.where("id IN (?)",current_user.friendlist.map(&:friend_id))
users.where("id IN (?)",#{current_user.friendlist.map(&:friend_id)})
current_user.friendlist.map(&:friend_id)
#{current_user.friendlist.map(&:friend_id)}
users.where(id: #{current_user.friendlist.map(&:friend_id)})
users.where("id: #{current_user.friendlist.map(&:friend_id)})
users.where("id IN (#{current_user.friendlist.map(&:friend_id)})")
users.where("id IN #{current_user.friendlist.map(&:friend_id)}")
users.where("id = #{current_user.friendlist.map(&:friend_id)}")
users.where("id = 1")
users.where("id = #{current_user.friendlist.map(&:friend_id)}")
users
users.where("id = #{current_user.friendlist.map(&:friend_id)}")
users.where("id = #{current_user.friendlist.map(&:friend_id)}").collect{|a| [id: a.id, name: a.first_name, image_url: user_picture_url(a,"imgss","[ img-circle pull-left ]",48), created_at: a.created_at, updated_at: a.updated_at]}.flatten
users = User.where("first_name ilike ?","#{params[:filter]}%")
c
User.lasct(3)[0]
User.last(3)[0]
User.last(2)[0]
User.last
 User.where("first_name Like ?","%#{params[:filter]}%")
 User.where("first_name Like ?","%#{params[:filter]}")
 User.where("first_name Like ?","#{params[:filter]}")
params[:filter]
 User.where("first_name Like ?","#{params[:filter]}%")
c
cc
params[:filter]
User.where("first_name Like ?","#{params[:filter]}%")
c
friends = User.where("id = #{current_user.friendlist.map(&:friend_id)}, first_name like '%'#{params[:filter]}").collect{|a| [id: a.id, name: a.first_name, image_url: user_picture_url(a,"imgss","[ img-circle pull-left ]",48), created_at: a.created_at, updated_at: a.updated_at]}.flatten
c
friends = User.where("id = #{current_user.friendlist.map(&:friend_id)}, first_name like '%'#{params[:filter]}").collect{|a| [id: a.id, name: a.first_name, image_url: user_picture_url(a,"imgss","[ img-circle pull-left ]",48), created_at: a.created_at, updated_at: a.updated_at]}.flatten
friends = User.where("id = #{current_user.friendlist.map(&:friend_id)}, first_name like #{params[:filter]}").collect{|a| [id: a.id, name: a.first_name, image_url: user_picture_url(a,"imgss","[ img-circle pull-left ]",48), created_at: a.created_at, updated_at: a.updated_at]}.flatten
params[:filter]
params[filter]
c
friends = User.where(id: (current_user.friendlist.map(&:friend_id))).collect{|a| [id: a.id, name: a.first_name, image_url: user_picture_url(a,"imgss","[ img-circle pull-left ]",48), created_at: a.created_at, updated_at: a.updated_at]}.flatten
c
friends = User.where(id: (current_user.friendlist.map(&:friend_id))).collect{|a| [id: a.id, name: a.first_name, image_url: user_picture(a,"imgss","[ img-circle pull-left ]",48), created_at: a.created_at, updated_at: a.updated_at]}.flatten
c
friends = User.where(id: (current_user.friendlist.map(&:friend_id))).collect{|a| [id: a.id, name: a.first_name, image_url: user_picture(a,"imgss","[ img-circle pull-left ]",48), created_at: a.created_at, updated_at: a.updated_at]}.flatten
c
friends = User.where(id: (current_user.friendlist.map(&:friend_id))).select(:first_name, :email)
 c
c
current_user.friendlist.map(&:friend_id).select(:first)
current_user.friendlist.map(&:friend_id)
current_user.friendlist
current_user.friendlists
current_user.friends
User.find(6)
User.find(4)
 friends = User.where(id: (current_user.friendlist.ids)).select(:first_name, :email)
current_user.friendlist.ids
c
friends = User.where(id: (current_user.friendlist.ids)).select(:first_name, :email)
params
c
ActiveSupport::JSON.decode(User.where(id: (current_user.friendlist.ids)))
JSON.parse(User.where(id: (current_user.friendlist.ids)))
JSON.parse(User.where(id: (current_user.friendlist.ids))
JSON.parse(User.where(id: (current_user.friendlist.ids)).select(:first_name, :email))
Parse.json(User.where(id: (current_user.friendlist.ids)).select(:first_name, :email))
User.where(id: (current_user.friendlist.ids)).select(:first_name, :email).json_parse
User.where(id: (current_user.friendlist.ids)).select(:first_name, :email).to_json.reject('id')
User.where(id: (current_user.friendlist.ids)).select(:first_name, :email).to_json.reject(:id)
User.where(id: (current_user.friendlist.ids)).select(:first_name, :email).to_json.except(:id)
User.where(id: (current_user.friendlist.ids)).select(:first_name, :email).to_json
c
User.where(id: (current_user.friendlist.ids)).select(:first_name, :email).to_json
c
User.where(id: (current_user.friendlist.ids)).select(:first_name, :email)
User.where(id: (current_user.friendlist.ids)).pluck(:first_name, :email)
User.where(id: (current_user.friendlist.ids)).pluck(:first_name, :email).to_json
User.where(id: (current_user.friendlist.ids)).pluck(:first_name, :email)
User.where(id: (current_user.friendlist.ids)).pluck(:first_name, :email, :avtar)
User.where(id: (current_user.friendlist.ids)).pluck(:first_name, :email)
User.where(id: (current_user.friendlist.ids)).pluck(:name, :email)
User.where(id: (current_user.friendlist.ids))
User.where("id: (4,6)")
User.where(ids: (current_user.friendlist.ids))
User.where(ids: (current_user.friendlist.ids)
current_user.friendlist.ids
current_user.friendlist
current_user.friendlist.pluck(:name, :email)
current_user.friendlist
current_user
c
params
c
params
c
results.movies[0..4].map{|f| [f.title, f.rating,"<input type='radio' name='movies' class='radio-btn' value='#{f.id}'>"]}
results.movies[0..4].collect{|f| [f.title, f.rating,"<input type='radio' name='movies' class='radio-btn' value='#{f.id}'>"]}
results.movies[0..49]
results.movies[0..10]
results.movies.paginate(:page => 2)
results.movies[0..10].count
results.movies[0..10]
results.movies.size
c
results.movies.first.rating
results.movies.first
results.ovies.first
results
data.count
data
datadata
data
data = results.movies.map{|f| [f.title, Imdb::Serie.new(f.id).rating, "<input type='radio' name ='movies' value='#{f.id}'>"]}
data: results.movies.map{|f| [f.title, Imdb::Serie.new(f.id).rating,"<input type='radio' name='movies' value='#{f.id}'>"]}
results.movies.size
results = Imdb::Search.new(params[:movie_name])
c
results.movies.map{|f| [title: f.id, rating: f.title]}
results.movies.map{|f| [f.id, f.title]}
c
results.movies.map{|f| [f.id, f.title]}.to_json
results.movies.map{|f| [f.id, f.title]}
results.movies.map{|f| [f.username, f.birthday]}
results.movies
results.movies.map( &:title)
results.movies.map('id' and 'title')
results.movies.map('id', 'title')
results.movies.map(:id, :title)
results.movies.pluck(:id, :title)
results.movies.map( &:title)
results.movies.pluck(:id, :title)
results.movies.pluck(&:id, &:title)
results.movies.map(&:id, &:title)
results.movies.map(&:id)
results.movies.to_json
results.movies.json
results.movies.size
params
results.movies
results
c
 result.movies.size > 0
 result = Imdb::Search.new("Agneepath")
c
json = JSON.parse(open(id.movies.first.url) { |x| x.read }).first
json['title']
json[:title]
json = JSON.parse(open(id.movies.first.url) { |x| x.read }).first
id.movies.first.url
id.
id.movies.url
response.body.include?('ratin'
response.body.gsub('\n', ' ----------')
response.body.gsub('\n', ' ')
response.body.gsub('\n', ' ').first
response.body.gsub('\n', ' ')
response.body.gsub('\n')
response.body.join('\n')
response.body.joins('\n')
response.body.join('\n')
response.body.gsub('\n')
response.body
response.body.collect{|a| a.include?('rating') ? a: nil}.compact.first
URI.extract(response.body).collect{|a| a.include?('rating') ? a: nil}.compact.first
response.body
id.movies.code
URI.extract(response.body).collect{|a| a.include?('.jpg') ? a.include?('amazon') ? a: nil : nil}.compact.first
URI.extract(response.body).collect{|a| a.include?('.jpg') ? a.include?('amazon') ? a: nil : nil}.compact.last
URI.extract(response.body).collect{|a| a.include?('.jpg') ? a.include?('amazon') ? a: nil : nil}.compact.first
id.movies.first.id
URI.extract(response.body).collect{|a| a.include?('.jpg') ? a.include?(id.movies.first.id) ? a: nil : nil}.compact
URI.extract(response.body).collect{|a| a.include?('.jpg') ? a.include?('amazon') ? a: nil : nil}.compact.last
URI.extract(response.body).collect{|a| a.include?('.jpg') ? a.include?('amazon') ? a: nil : nil}.compact.first
URI.extract(response.body).collect{|a| a.include?('.jpg') ? a.include?('amazon') ? a: nil : nil}.compact.count
URI.extract(response.body).collect{|a| a.include?('.jpg') ? a.include?('amazon') ? a: nil : nil}.compact
URI.extract(response.body).collect{|a| a.include?('.jpg') ? a.include?('amazon') ? a: nil : nil}.compact.first
URI.extract(response.body).collect{|a| a.include?('.jpg') ? a : nil}.compact.first
URI.extract(response.body).collect{|a| a.include?('.jpg') ? a : nil}.compact.count
URI.extract(response.body).collect{|a| a.include?('.jpg') ? a : nil}.compact
URI.extract(response.body).collect{|a| a.include?('.jpg')}
URI.extract(response.body)
response.body.include?(".jpg")
response.body.includ?(".jpg")
response.body
response = http.request(request)
request = Net::HTTP::Get.new(uri.request_uri)
http = Net::HTTP.new(uri.host, uri.port)
uri = URI.parse(id.movies.first.url)
URI.parse(id.movies.first.url)
id.movies.first.url
id.movies.first.first
id.movies.first[0]
id.movies.first
id.movies.first.image
id.movies.first.id
id.movies.first
id
id.movies.id
id.movies.code
id.movies.size
id = Imdb::Search.new("Agneepath")
c
id.movies
id = Imdb::Search.new("Agneepath+movie")
id.movies
id = Imdb::Search.new("'Agneepath'+'hindi'")
id.movies
id = Imdb::Search.new("'Agneepath'+'movie'")
id = Imdb::Search.new("Agneepath")
id.size
id
id.movies
id.title
id = Imdb::Movie.new("Agneepath")
id = Imdb::Search.new("Agneepath")
id.movies.first
id.movies.size
id = Imdb::Search.new("Agneepath movie")
id.movies.second
id.movies.first
id.movies.size
id = Imdb::Search.new("Agneepath")
id.movies.second
id.movies.first
id.movies.size
id = Imdb::Search.new("Shole")
id.movies.size
id = Imdb::Search.new("Shayeri")
id.movies.size
id = Imdb::Search.new("Shayer")
id.movies.size
id.movies
id.size
id = Imdb::Search.new("Star Trek")
id.title
id = Imdb::Movie.new("0095016")
i = Imdb::Movie.new("0095016")
c
Geokit::Geocoders::IpGeocoder.geocode(ip.to_s())
ip = ip.ip_address
 ip = Socket.ip_address_list.detect{|intf| intf.ipv4_private?}
c
Contacts::Gmail.new('ankityuvasoft175@gmail.com', 'ankityuvasoft@gmail.com', :captcha_token => params[:captcha_token], :captcha_response => params[:captcha_response]).contacts
Contacts::Gmail.new(login,                    password,                    :captcha_token => params[:captcha_token],                    :captcha_response => params[:captcha_response]).contacts
password="ankityuvasoft@gmail.com"
login = "ankityuvasoft175@gmail.com"
Contacts::Gmail.new(login,                    password,                    :captcha_token => params[:captcha_token],                    :captcha_response => params[:captcha_response]).contacts
                    :captcha_response => params[:captcha_response]).contacts
                    :captcha_token => params[:captcha_token],
                    password,
Contacts::Gmail.new(login,
Contacts::Gmail.new('satyamyuvasoft158@gmail.com', 'yuvasoft#sid').contacts
Contacts::Gmail.new('ankityuvasoft175@gmail.com', 'ankityuvasoft@gmail.com', :captcha_token => params[:captcha_token], :captcha_response => params[:captcha_response]).contacts
c
Contacts::Gmail.new('ankityuvasoft175@gmail.com', 'ankityuvasoft@gmail.com', :captcha_token => params[:captcha_token], :captcha_response => params[:captcha_response]).contacts
Contacts::Gmail.new('satyamyuvasoft158@gmail.com', 'yuvasoft#sid').contacts
Contacts::Gmail.new('ankityuvasoft175@gmail.com', 'ankityuvasoft@gmail.com')  rescue Contacts::AuthenticationError  
