c
Album.exists?(@album.id)
c
@album.pin.nil? || @album.pin == ""
@album.pin.nil?
@album
@album.pin.nil?
@album.pin = ""
@album.pin.nil?
params[:pin]
@album.pin.nil?
@album.pin == params[:pin]
 @album = Album.find(params[:album_id])
c
Album.exists?(@album.id)
@album.destroy
@album.pin == params[:pin]
@album = Album.find(params[:album_id])
c
Album.exists?(@album.id)
@album.destroy
@album.id
Album.exists?(@album.id)
c
@album = Album.find(params[:album_id])
c
params
c
params
c
format.js
c
@album.pin == params[:pin]
 @album = Album.find(params[:album_id])
c
 @album.locked == "Yes"
c
@album.update(:locked => "No")
@album.locked == "Yes"
@album.pin == params[:pin]
@album.save
@album.locked = "Yes"
@album.locked == "Yes"
@album.pin = params[:pin]
@album.pin.nil?
@album.pin == params[:pin]
 @album = Album.find(params[:album_id])
c
params
c
params
 @album = Album.find(params[:id])
c
request.xhr?
params
c
album.user_id == current_user.id
current_user
c
current_user
c
album.user_id == current_user.id && album.locked == "Yes"
album.locked
current_user.id
album.user_id == current_user.id
album.user_id
c
album.update(:locked => "Yes")
album.locked
album = Album.find(params[:id])
params[:id]
params
c
album
c
tmp
tmp.collect{|a| a.unlink}
tmp.collect{|a| a.unlike}
tmp
tmp.destroy_all
tmp.flatten.destroy_all
tmp.flatten.delete_all
tmp.flatten.delete
tmp.flatten.nil?
tmp.flatten.unlike
tmp.flatten
tmp.all
tmp.unlike
tmp
c
Pathname.new("#{Rails.root.to_s}/app/assets/images/tmp/").children.each { |p| p.unlink }
Pathname.new('#{Rails.root.to_s}/app/assets/images/tmp/*').children.each { |p| p.unlink }
Pathname.new('#{Rails.root.to_s}/app/assets/images/tmp').children.each { |p| p.unlink }
Pathname.new('#{Rails.root.to_s}/app/assets/images/tmp/').children.each { |p| p.unlink }
Pathname.new('#{Rails.root.to_s}/app/assets/images/tmp/').children.each { |p| p.unlink } rescue nil
c
Pathname.new('#{Rails.root.to_s}/app/assets/images/tmp/').children.each { |p| p.unlink } rescue nil
Pathname.new('#{Rails.root.to_s}/app/assets/images/tmp/').children.each { |p| p.unlink }
Pathname.new('#{Rails.root.to_s}/app/assets/images/tmp').children.each { |p| p.unlink } 
Pathname.new('#{Rails.root.to_s}/app/assets/images/tmp').children.each { |p| p.unlink }
Pathname.new('#{Rails.root.to_s}/app/assets/images/tmp/').children.each { |p| p.unlink }
c
FileUtils.rm_rf(Dir.glob('#{Rails.root.to_s}/app/assets/images/tmp/*'))
c
FileUtils.rm_rf(Dir.glob('#{Rails.root.to_s}/app/assets/images/tmp/*'))
c
FileUtils.rm_rf(Dir.glob('#{Rails.root.to_s}/app/assets/images/tmp/*'))
FileUtils.rm_rf("#{Rails.root.to_s}/app/assets/images/tmp")
File.delete("#{Rails.root.to_s}/app/assets/images/tmp/*.*")
File.delete("#{Rails.root.to_s}/app/assets/images/tmp/*")
File.delete("#{Rails.root.to_s}/app/assets/images/tmp/")
tmp
c
tmp.collect{|a| a.delete}
tmp
tmp.destroy
tmp.close
tmp.delete_all
tmp.delete
tmp
tmp.first.delete
tmp.first.destroy
tmp.first
tmp
tmp.all
tmp
tmp.delete_all
tmp.delete
tmp
c
tmp
tmp = nil
tmp
tmp.all
tmp.all.
tmp.all.destroy
tmp.flush
tmp.delete
tmp.destroy
tmp
c
tmp[index] = Tempfile.new([File.basename((photo.pic_file_name), frmat)+index.to_s, frmat], "#{Rails.root.to_s}/app/assets/images/tmp/")
(tmp+index.to_s) = Tempfile.new([File.basename((photo.pic_file_name), frmat)+index.to_s, frmat], "#{Rails.root.to_s}/app/assets/images/tmp/")
tmp+index.to_s = Tempfile.new([File.basename((photo.pic_file_name), frmat)+index.to_s, frmat], "#{Rails.root.to_s}/app/assets/images/tmp/")
tmp_index.to_s = Tempfile.new([File.basename((photo.pic_file_name), frmat)+index.to_s, frmat], "#{Rails.root.to_s}/app/assets/images/tmp/")
c
index
[File.basename((photo.pic_file_name), frmat)+index.to_s, frmat]
tmp = Tempfile.new([File.basename((photo.pic_file_name), frmat)+index.to_s, frmat], "#{Rails.root.to_s}/app/assets/images/tmp/")
c
 tmp = Tempfile.new([File.basename((photo.pic_file_name), frmat)+index.to_s, frmat], "#{Rails.root.to_s}/app/assets/images/tmp/")
 tmp = Tempfile.new([File.basename((photo.pic_file_name), frmat)_index.to_s, frmat], "#{Rails.root.to_s}/app/assets/images/tmp/")
 tmp = Tempfile.new([File.basename((photo.pic_file_name), frmat), frmat], "#{Rails.root.to_s}/app/assets/images/tmp/")
c
[File.basename((photo.pic_file_name), frmat), frmat]
[File.basename((photo.pic_file_name, frmat), frmat), frmat]
[File.basename((photo.pic_file_name, frmat)+index.to_s, frmat), frmat]
[File.basename((photo.pic_file_name, frmat))+index.to_s, frmat), frmat]
File.basename((photo.pic_file_name, frmat)
[File.basename((photo.pic_file_name, frmat)+index.to_s, frmat), frmat]
[File.basename((photo.pic_file_name, frmat))+index.to_s, frmat), frmat]
[File.basename((photo.pic_file_name, frmat)+index.to_s, frmat), frmat]
[File.basename((photo.pic_file_name.gsub("..","."))+index.to_s, frmat), frmat]
(photo.pic_file_name.gsub("..","."))
[File.basename((photo.pic_file_name.gsub("..","."))+index.to_s, frmat), frmat]
[File.basename(photo.pic_file_name.gsub("..",".")+index.to_s, frmat), frmat]
[File.basename(photo.pic_file_name+index.to_s, frmat), frmat]
[File.basename(photo.pic_file_name+index.to_S, frmat), frmat]
[File.basename(photo.pic_file_name+index, frmat), frmat]
File.basename(photo.pic_file_name+index, frmat), frmat
File.basename(photo.pic_file_name+index, frmat)
tmp = Tempfile.new([File.basename(photo.pic_file_name+index.to_s, frmat), frmat], "#{Rails.root.to_s}/app/assets/images/tmp/")
tmp = Tempfile.new([File.basename(photo.pic_file_name+index, frmat), frmat], "#{Rails.root.to_s}/app/assets/images/tmp/")
tmp = Tempfile.new([File.basename(photo.pic_file_name, frmat), frmat], "#{Rails.root.to_s}/app/assets/images/tmp/")
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
 @options[:format] = "jpeg"
 @options[:format]
@whiny          = options[:whiny].nil? ? true : options[:whiny]
@basename       = File.basename(@file.path, @current_format)
 @current_format = File.extname(attachment.instance.pic_file_name)
@instance       = attachment.instance
@options        = options
@file           = file
c
encrypted_file_content
file_content = AES.decrypt(encrypted_file_content, secured_keys.key)
secured_keys.key
file_content = AES.decrypt(encrypted_file_content, secured_keys.key)
secured_keys=SecuredKey.last
encrypted_file_content = (File.read(photo.pic.path(:medium)) rescue  File.read(photo.pic.path))
frmat =(File.extname(photo.pic_file_name)).gsub("..",".")
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
cimage_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
cc
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
image_tag file.path.gsub("images/","").split("/app",2)[1], class: "img_view"
c
file.path.gsub("images/","").split("/app",2)[1]
file.path.gsub("images/","").split("/app",2)
file.path.gsub("images/","").split("",2)
file.path.gsub("images/","").gsub(/\app+$/, '')
file.path.gsub("images/","").gsub(/\*+$/, '')
file.path.gsub("images/","").gsub("^app/","")
file.path.gsub("images/","").gsub("*app/","")
file.path.gsub("images/","")
file.path
c
image_tag file.path
c
image file.path
image_tag file.path
image_path file.path
image_path file.url
image_path file.path
image_tag file.path
c
file.path
file.path.gsub("/","..")
file.path.gsub("..","")
file.path
image_tag "../../".to_s+ file.path
image_tag "../../"+ file.path
image_tag "../../"+file.path
image_tag "../../"file.path
image_tag file.path
