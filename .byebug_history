c
Geokit::Geocoders::IpGeocoder.geocode(ip.to_s())
ip = ip.ip_address
 ip = Socket.ip_address_list.detect{|intf| intf.ipv4_private?}
c
Contacts::Gmail.new('ankityuvasoft175@gmail.com', 'ankityuvasoft@gmail.com', :captcha_token => params[:captcha_token], :captcha_response => params[:captcha_response]).contacts
Contacts::Gmail.new(login,                    password,                    :captcha_token => params[:captcha_token],                    :captcha_response => params[:captcha_response]).contacts
password="ankityuvasoft@gmail.com"
login = "ankityuvasoft175@gmail.com"
Contacts::Gmail.new(login,                    password,                    :captcha_token => params[:captcha_token],                    :captcha_response => params[:captcha_response]).contacts
                    :captcha_response => params[:captcha_response]).contacts
                    :captcha_token => params[:captcha_token],
                    password,
Contacts::Gmail.new(login,
Contacts::Gmail.new('satyamyuvasoft158@gmail.com', 'yuvasoft#sid').contacts
Contacts::Gmail.new('ankityuvasoft175@gmail.com', 'ankityuvasoft@gmail.com', :captcha_token => params[:captcha_token], :captcha_response => params[:captcha_response]).contacts
c
Contacts::Gmail.new('ankityuvasoft175@gmail.com', 'ankityuvasoft@gmail.com', :captcha_token => params[:captcha_token], :captcha_response => params[:captcha_response]).contacts
Contacts::Gmail.new('satyamyuvasoft158@gmail.com', 'yuvasoft#sid').contacts
Contacts::Gmail.new('ankityuvasoft175@gmail.com', 'ankityuvasoft@gmail.com')  rescue Contacts::AuthenticationError  
Contacts::Gmail.new('ankityuvasoft175@gmail.com', 'ankityuvasoft@gmail.com')
params
Contacts::Gmail.new('satyamyuvasoft158@gmail.com', 'yuvasoft#sid', :captcha_token => params[:captcha_token], :captcha_response => params[:captcha_response]).contacts
Contacts::Gmail.new('satyamyuvasoft158@gmail.com', '', :captcha_token => params[:captcha_token], :captcha_response => params[:captcha_response]).contacts
Contacts::Gmail.new('ankityuvasoft175@gmail.com', 'ankityuvasoft@gmail.com').contacts
Contacts::Gmail.new('satyamyuvasoft158@gmail.com', 'yuvasoft#sid').contacts
Contacts::Gmail.new('ankityuvasoft175@gmail.com', 'ankityuvasoft@gmail.com').contacts
Contacts::Gmail.new('satyamyuvasoft158@gmail.com', 'yuvasoft#sid', :captcha_token => params[:captcha_token], :captcha_response => params[:captcha_response]).contacts
Contacts::Gmail.new('satyamyuvasoft158@gmail.com', 'yuvasoft#sid').contacts
Contacts::Gmail.new('ankityuvasoft175@gmail.com', 'ankityuvasoft@gmail.com').contacts
Contacts::Gmail.new('satyamyuvasoft158@gmail.com', 'yuvasoft#sid').contacts
c
Contacts::Gmail.new('satyamyuvasoft158@gmail.com', 'yuvasoft#sid').contacts
c
cv
Contacts::Gmail.new('satyamyuvasoft158@gmail.com', 'yuvasoft#sid').contacts
c
Contacts::Gmail.new('ankityuvasoft175@gmail.com', 'ankityuvasoft@gmail.com').contacts
c
@friend.last_seen.to_date > Time.now - 1.minute
@friend=User.find(friends.friend_id)
c
@friend=User.find(friends.friend_id)
@friend.last_seen.to_date > Time.now - 1.minute
@friend=User.find(friends.friend_id)
c
@friend.last_seen.to_date > Time.now - 1.minute
c
@friend.last_seen.to_date > Time.now - 1.minute
@friend.last_seen.to_time
@friend.last_seen.to_date
@friend.last_seen.to_date > Time.now - 1.minute
1.minute.ago
@friend.last_seen > Time.now - 1.minute
@friend=User.find(friends.friend_id)
c
@friend=User.find(friends.friend_id)
@friend.last_seen > Time.now - 1.minute
@friend=User.find(friends.friend_id)
c
cc
c
@friend.last_seen > Time.now - 1.minute
@friend=User.find(friends.friend_id)
@friend.last_seen > Time.now - 1.minute
c
@friend.last_seen > Time.now - 1.minute
@friend.last_seen > 1.minutes.ago
@friend=User.find(friends.friend_id)
c
@friend=User.find(friends.friend_id)
c
@friend=User.find(friends.friend_id)
c
@friend=User.find(friends.friend_id)
c
@friend=User.find(friends.friend_id)
c
@friend=User.find(friends.friend_id)
friends
c
v
c
cc
c
@friend.last_seen > 1.minutes.ago ? 'away' : 'on'
c
@friend.last_seen > 1.minutes.ago
@friend
c
@friend
c@friend
c
cc
c
@friend.last_seen > 1.minutes.ago ? 'on' : 'away'
@friend.last_seen > 1.minutes.ago
c
@friend.last_seen > 1.minutes.ago
c
params[:action] != "who_is_online"
params
c
@friend.last_seen
c
@friend.last_seen
User.find(3)
User.second
User.last
@friend.last_seen > 10.seconds.ago
 @friend.fullname
 @friend.full_name
 @friend
@friend.last_seen
@friend.last_seen > 10.seconds.ago ? 'away': 'on'
c
current_user.update(last_seen:  Time.now)
current_user.update(last_seen :Time.now)
current_user.update(:last)
authenticate_user!
current_userB!
authenticate_user
current_user
c
params
10.minutes.ago
current_user.updated_at >  10.minutes.ago
current_user
c
current_user
self
params
c
Geokit::Geocoders::IpGeocoder.geocode(request.remote_ip.to_s)
Geokit::Geocoders::IpGeocoder.geocode(request.remote_ip.to_s())
request.remote_ip
Geokit::Geocoders::IpGeocoder.geocode(request.remote_ip)
Geokit::Geocoders::IpGeocoder.geocode(ip.to_s())
ip = ip.ip_address
ip = Socket.ip_address_list.detect{|intf| intf.ipv4_private?}
c
Location.by_distance(:origin => [192.168.0.11])
Location.by_distance(:origin => [ip])
location = IpGeocoder.geocode('192.168.0.11')
 ip = ip.ip_address
ip = Socket.ip_address_list.detect{|intf| intf.ipv4_private?}
c
request.remote_ip
Socket.ip_address_list.detect
c
respond_to do |format| format.json {render json: ip} end
format.json {render json: ip}
 ip = ip.ip_address
ip = Socket.ip_address_list.detect{|intf| intf.ipv4_private?}
params
c
v
ip = Socket.ip_address_list.detect{|intf| intf.ipv4_public?}
ip.ip_address
ip = Socket.ip_address_list.detect{|intf| intf.ipv4_private?}
request.remote_ip
Socket::getaddrinfo(Socket.gethostname,"echo",Socket::AF_INET)[0][3]
require 'socket'
request.remote_ip
request.env['HTTP_X_REAL_IP']
c
request.remote_ip
request
