c
Geokit::Geocoders::IpGeocoder.geocode(request.remote_ip.to_s)
Geokit::Geocoders::IpGeocoder.geocode(request.remote_ip.to_s())
request.remote_ip
Geokit::Geocoders::IpGeocoder.geocode(request.remote_ip)
Geokit::Geocoders::IpGeocoder.geocode(ip.to_s())
ip = ip.ip_address
ip = Socket.ip_address_list.detect{|intf| intf.ipv4_private?}
c
Location.by_distance(:origin => [192.168.0.11])
Location.by_distance(:origin => [ip])
location = IpGeocoder.geocode('192.168.0.11')
 ip = ip.ip_address
ip = Socket.ip_address_list.detect{|intf| intf.ipv4_private?}
c
request.remote_ip
Socket.ip_address_list.detect
c
respond_to do |format| format.json {render json: ip} end
format.json {render json: ip}
 ip = ip.ip_address
ip = Socket.ip_address_list.detect{|intf| intf.ipv4_private?}
params
c
v
ip = Socket.ip_address_list.detect{|intf| intf.ipv4_public?}
ip.ip_address
ip = Socket.ip_address_list.detect{|intf| intf.ipv4_private?}
request.remote_ip
Socket::getaddrinfo(Socket.gethostname,"echo",Socket::AF_INET)[0][3]
require 'socket'
request.remote_ip
request.env['HTTP_X_REAL_IP']
c
request.remote_ip
request
